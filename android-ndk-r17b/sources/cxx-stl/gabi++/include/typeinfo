// Copyright (C) 2011 The Android Open Source Project
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. Neither the name of the project nor the names of its contributors
//    may be used to endorse or promote products derived from this software
//    without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//
// typeinfo: RTTI support header.
//
// References:
// Itanium C++ ABI at http://www.codesourcery.com/public/cxx-abi/abi.html.
// IHI0041A C++ Application Binary Interface for the ARM architecture.
// Linux Standard Base C++ Specification for S390X 4.1.
//
#ifndef __GABIXX_TYPEINFO__
#define __GABIXX_TYPEINFO__

#if  !defined(LIBCXXABI)

#include <exception>

namespace std
{
  // Defintion of type_info based on example in C++ ABI section 2.9.3
  class type_info
  {
  public:
    virtual
    ~type_info();

    // Whether two type_infos corresponds to the same types.
    bool
    operator==(const type_info &ti) const;

    // Whether two type_infos corresponds to the different types.
    bool
    operator!=(const type_info &ti) const;

    bool
    before(const type_info &ti) const;

    // Return name of type.
    const char* name() const {
      // Compatible with GNU
      return (__type_name[0] == '*') ? __type_name + 1 : __type_name;
    }

  private:
    // Assignment of type_info is not allowed.
    type_info (const type_info& rhs);

    type_info&
    operator=(const type_info& rhs);

    // Mangled name of type.
    const char *__type_name;
  };


  class bad_cast : public exception {
  public:
    bad_cast() throw();
    virtual ~bad_cast() throw();
    virtual const char* what() const throw();
  };

  class bad_typeid : public exception {
  public:
    bad_typeid() throw();
    virtual ~bad_typeid() throw();
    virtual const char* what() const throw();
  };

} // namespace std

#endif  // !defined(LIBCXXABI)

#endif // _GABIXX_TYPEINFO_
